# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C6sI6SU5HgPrNrCxBiEsVVnxXxJEmxeQ
"""

# ECHO VERSE - AI Powered Audio Book Creation Tool
# For Google Colab with Granite 3.2 2B Instruct

!pip install -q transformers torch gradio gtts pydub

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from gtts import gTTS
import tempfile
import os

# Load Granite 3.2 2B Instruct model
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16,
    device_map="auto"
)

def generate_story(prompt, max_length=500):
    """Generate story content using Granite model"""
    formatted_prompt = f"<|system|>\nYou are a creative storyteller. Write engaging, well-structured stories suitable for audio books.\n<|user|>\n{prompt}\n<|assistant|>\n"

    inputs = tokenizer(formatted_prompt, return_tensors="pt", truncation=True)

    with torch.no_grad():
        outputs = model.generate(
            inputs.input_ids,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
    story = generated_text.split("<|assistant|>\n")[-1].strip()
    return story

def text_to_audio(text, language='en'):
    """Convert text to audio using gTTS"""
    if not text.strip():
        return None

    try:
        tts = gTTS(text=text, lang=language, slow=False)
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
        tts.save(temp_file.name)
        return temp_file.name
    except Exception as e:
        return f"Error generating audio: {str(e)}"

def create_audiobook(story_prompt, language='en', max_length=500):
    """Main function to create audiobook"""
    # Generate story
    story_text = generate_story(story_prompt, max_length)

    # Convert to audio
    audio_file = text_to_audio(story_text, language)

    return story_text, audio_file

# Gradio Interface
def gradio_interface():
    with gr.Blocks(title="üéß ECHO VERSE - AI Audio Book Creator") as app:
        gr.Markdown("# üéß ECHO VERSE")
        gr.Markdown("*AI-Powered Audio Book Creation Tool with Granite 3.2 2B Instruct*")

        with gr.Row():
            with gr.Column():
                story_input = gr.Textbox(
                    label="üìù Story Prompt",
                    placeholder="Enter your story idea, theme, or prompt...",
                    lines=3
                )

                language_choice = gr.Dropdown(
                    choices=[
                        ("English", "en"),
                        ("Spanish", "es"),
                        ("French", "fr"),
                        ("German", "de"),
                        ("Italian", "it")
                    ],
                    label="üåç Audio Language",
                    value="en"
                )

                length_slider = gr.Slider(
                    minimum=200,
                    maximum=1000,
                    value=500,
                    step=50,
                    label="üìè Story Length (tokens)"
                )

                generate_btn = gr.Button("üé≠ Generate Audio Book", variant="primary")

            with gr.Column():
                story_output = gr.Textbox(
                    label="üìñ Generated Story",
                    lines=10,
                    max_lines=15
                )

                audio_output = gr.Audio(
                    label="üéµ Audio Book",
                    type="filepath"
                )

        generate_btn.click(
            fn=create_audiobook,
            inputs=[story_input, language_choice, length_slider],
            outputs=[story_output, audio_output]
        )

        gr.Markdown("---")
        gr.Markdown("*Powered by IBM Granite 3.2 2B Instruct & Google Text-to-Speech*")

    return app

# Launch the app
if __name__ == "__main__":
    app = gradio_interface()
    app.launch(share=True, debug=True)

